
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000f04  00000f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800090  00800090  00000fc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003586  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001420  00000000  00000000  000049ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e03  00000000  00000000  00005e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  00007c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f9a  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d4c  00000000  00000000  0000969a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000b3e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_4>
  14:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_5>
  18:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_6>
  1c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_9>
  28:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_10>
  2c:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_13>
  38:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_14>
  3c:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_15>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  8a:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

}

void ADC_SetCallBack(void(*LocalPtr)(void))
{
	ADC_Fptr=LocalPtr;
  92:	8f e8       	ldi	r24, 0x8F	; 143
  94:	86 b9       	out	0x06, r24	; 6
  96:	08 95       	ret

00000098 <ADC_ReadSingleChannel>:
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	87 b9       	out	0x07, r24	; 7
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_ReadSingleChannel+0xa>
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	86 b9       	out	0x06, r24	; 6
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	08 95       	ret

000000b2 <__vector_16>:

}

void __vector_16(void)
{
	if(ADC_Fptr!=0)
  b2:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__data_end>
  b6:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__data_end+0x1>
  ba:	30 97       	sbiw	r30, 0x00	; 0
  bc:	09 f0       	breq	.+2      	; 0xc0 <__vector_16+0xe>
{
	ADC_Fptr();
  be:	09 95       	icall
  c0:	08 95       	ret

000000c2 <Dio_SetPinMode>:
}

void Dio_SetPinMode(Pin_Type Pin,PinMode_type mode)
{
	Pin_Type PORT,Pin_Val;
	PORT = Pin/8;
  c2:	28 2f       	mov	r18, r24
  c4:	26 95       	lsr	r18
  c6:	26 95       	lsr	r18
  c8:	26 95       	lsr	r18
	Pin_Val = Pin%8;
  ca:	87 70       	andi	r24, 0x07	; 7
	switch(mode)
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	09 f4       	brne	.+2      	; 0xd2 <Dio_SetPinMode+0x10>
  d0:	3f c0       	rjmp	.+126    	; 0x150 <Dio_SetPinMode+0x8e>
  d2:	08 f4       	brcc	.+2      	; 0xd6 <Dio_SetPinMode+0x14>
  d4:	5c c0       	rjmp	.+184    	; 0x18e <Dio_SetPinMode+0xcc>
  d6:	62 30       	cpi	r22, 0x02	; 2
  d8:	21 f1       	breq	.+72     	; 0x122 <Dio_SetPinMode+0x60>
  da:	63 30       	cpi	r22, 0x03	; 3
  dc:	09 f0       	breq	.+2      	; 0xe0 <Dio_SetPinMode+0x1e>
  de:	76 c0       	rjmp	.+236    	; 0x1cc <Dio_SetPinMode+0x10a>
	{
		case InPut_PullUp:
		CLRBIT(*ArrDDR[PORT],Pin_Val);
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	f9 01       	movw	r30, r18
  e8:	e0 58       	subi	r30, 0x80	; 128
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	ba 01       	movw	r22, r20
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Dio_SetPinMode+0x3c>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <Dio_SetPinMode+0x38>
 102:	cb 01       	movw	r24, r22
 104:	96 2f       	mov	r25, r22
 106:	90 95       	com	r25
 108:	40 81       	ld	r20, Z
 10a:	94 23       	and	r25, r20
 10c:	90 83       	st	Z, r25
		SETBIT(*ArrPORT[PORT],Pin_Val);
 10e:	f9 01       	movw	r30, r18
 110:	e8 57       	subi	r30, 0x78	; 120
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	01 90       	ld	r0, Z+
 116:	f0 81       	ld	r31, Z
 118:	e0 2d       	mov	r30, r0
 11a:	90 81       	ld	r25, Z
 11c:	89 2b       	or	r24, r25
 11e:	80 83       	st	Z, r24
		break;
 120:	08 95       	ret
		case Input_Float:
		CLRBIT(*ArrDDR[PORT],Pin_Val);
 122:	e2 2f       	mov	r30, r18
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 58       	subi	r30, 0x80	; 128
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	01 90       	ld	r0, Z+
 130:	f0 81       	ld	r31, Z
 132:	e0 2d       	mov	r30, r0
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	a9 01       	movw	r20, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_SetPinMode+0x7e>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	8a 95       	dec	r24
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_SetPinMode+0x7a>
 144:	ca 01       	movw	r24, r20
 146:	80 95       	com	r24
 148:	90 81       	ld	r25, Z
 14a:	89 23       	and	r24, r25
 14c:	80 83       	st	Z, r24
		break;
 14e:	08 95       	ret
		case OutPut_High:
		SETBIT(*ArrDDR[PORT],Pin_Val);
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	f9 01       	movw	r30, r18
 158:	e0 58       	subi	r30, 0x80	; 128
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	01 90       	ld	r0, Z+
 15e:	f0 81       	ld	r31, Z
 160:	e0 2d       	mov	r30, r0
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	ba 01       	movw	r22, r20
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dio_SetPinMode+0xac>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dio_SetPinMode+0xa8>
 172:	cb 01       	movw	r24, r22
 174:	90 81       	ld	r25, Z
 176:	98 2b       	or	r25, r24
 178:	90 83       	st	Z, r25
		SETBIT(*ArrPORT[PORT],Pin_Val);
 17a:	f9 01       	movw	r30, r18
 17c:	e8 57       	subi	r30, 0x78	; 120
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	01 90       	ld	r0, Z+
 182:	f0 81       	ld	r31, Z
 184:	e0 2d       	mov	r30, r0
 186:	90 81       	ld	r25, Z
 188:	89 2b       	or	r24, r25
 18a:	80 83       	st	Z, r24
		break;
 18c:	08 95       	ret
		case OutPut_Low:
		SETBIT(*ArrDDR[PORT],Pin_Val);
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	f9 01       	movw	r30, r18
 196:	e0 58       	subi	r30, 0x80	; 128
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	01 90       	ld	r0, Z+
 19c:	f0 81       	ld	r31, Z
 19e:	e0 2d       	mov	r30, r0
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	ba 01       	movw	r22, r20
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Dio_SetPinMode+0xea>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	8a 95       	dec	r24
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Dio_SetPinMode+0xe6>
 1b0:	cb 01       	movw	r24, r22
 1b2:	90 81       	ld	r25, Z
 1b4:	98 2b       	or	r25, r24
 1b6:	90 83       	st	Z, r25
		CLRBIT(*ArrPORT[PORT],Pin_Val);
 1b8:	f9 01       	movw	r30, r18
 1ba:	e8 57       	subi	r30, 0x78	; 120
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	01 90       	ld	r0, Z+
 1c0:	f0 81       	ld	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	80 95       	com	r24
 1c6:	90 81       	ld	r25, Z
 1c8:	89 23       	and	r24, r25
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret

000001ce <DIO_Init>:
 Dio_PinD0_init, Dio_PinD1_init, Dio_PinD2_init, Dio_PinD3_init,
 Dio_PinD4_init, Dio_PinD5_init, Dio_PinD6_init, Dio_PinD7_init 
 };	

void DIO_Init(void)
{	
 1ce:	cf 93       	push	r28
	for(uint8 PinCount=Pin_A0;PinCount<=Pin_D7;PinCount++){
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <DIO_Init+0x18>
	
		  Dio_SetPinMode(PinCount,Dio_PinInitArray[PinCount]);
 1d4:	ec 2f       	mov	r30, r28
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e0 5a       	subi	r30, 0xA0	; 160
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	60 81       	ld	r22, Z
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
 Dio_PinD4_init, Dio_PinD5_init, Dio_PinD6_init, Dio_PinD7_init 
 };	

void DIO_Init(void)
{	
	for(uint8 PinCount=Pin_A0;PinCount<=Pin_D7;PinCount++){
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
 1e6:	c0 32       	cpi	r28, 0x20	; 32
 1e8:	a8 f3       	brcs	.-22     	; 0x1d4 <DIO_Init+0x6>
	
		  Dio_SetPinMode(PinCount,Dio_PinInitArray[PinCount]);
	}
	
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <DIO_WritePinVal>:


void DIO_WritePinVal(Pin_Type Pin, uint8 val)
{
	Pin_Type PORT,Pin_Val;
	PORT = Pin/8;
 1ee:	e8 2f       	mov	r30, r24
 1f0:	e6 95       	lsr	r30
 1f2:	e6 95       	lsr	r30
 1f4:	e6 95       	lsr	r30
	Pin_Val = Pin %8;
 1f6:	87 70       	andi	r24, 0x07	; 7
	if(val == HIGH)
 1f8:	61 30       	cpi	r22, 0x01	; 1
 1fa:	a9 f4       	brne	.+42     	; 0x226 <DIO_WritePinVal+0x38>
	{
		SETBIT(*ArrPORT[PORT],Pin_Val);
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e8 57       	subi	r30, 0x78	; 120
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_WritePinVal+0x2a>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	8a 95       	dec	r24
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_WritePinVal+0x26>
 21c:	ca 01       	movw	r24, r20
 21e:	90 81       	ld	r25, Z
 220:	89 2b       	or	r24, r25
 222:	80 83       	st	Z, r24
 224:	08 95       	ret
	}
	else if (val == LOW)
 226:	61 11       	cpse	r22, r1
 228:	15 c0       	rjmp	.+42     	; 0x254 <DIO_WritePinVal+0x66>
	{
		CLRBIT(*ArrPORT[PORT],Pin_Val);
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e8 57       	subi	r30, 0x78	; 120
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	01 90       	ld	r0, Z+
 236:	f0 81       	ld	r31, Z
 238:	e0 2d       	mov	r30, r0
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	a9 01       	movw	r20, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_WritePinVal+0x58>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_WritePinVal+0x54>
 24a:	ca 01       	movw	r24, r20
 24c:	80 95       	com	r24
 24e:	90 81       	ld	r25, Z
 250:	89 23       	and	r24, r25
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <GI_Enable>:
 */ 
#include "GI_Inter.h"

void GI_Enable(void)
{
	SETBIT(SREG,I);
 256:	8f b7       	in	r24, 0x3f	; 63
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8f bf       	out	0x3f, r24	; 63
 25c:	08 95       	ret

0000025e <KEYPAD_init>:
	'c', '1', '4', '7'
};

void KEYPAD_init(void)
{
	Dio_SetPinMode(PD7,InPut_PullUp);
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PD6,InPut_PullUp);
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PD5,InPut_PullUp);
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PD3,InPut_PullUp);
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PC5,OutPut_Low);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PC4,OutPut_Low);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PC3,OutPut_Low);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
	Dio_SetPinMode(PC2,OutPut_Low);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 61 00 	call	0xc2	; 0xc2 <Dio_SetPinMode>
 29e:	08 95       	ret

000002a0 <Write_Half_Port>:
	_delay_ms(1);
	DIO_WritePinVal(LCD_EN,LOW);
	
}
static void Write_Half_Port(uint8 Value)
{
 2a0:	cf 93       	push	r28
 2a2:	c8 2f       	mov	r28, r24
	DIO_WritePinVal(LCD_D4,READBIT(Value,0));
 2a4:	68 2f       	mov	r22, r24
 2a6:	61 70       	andi	r22, 0x01	; 1
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	DIO_WritePinVal(LCD_D5,READBIT(Value,1));
 2ae:	c1 fb       	bst	r28, 1
 2b0:	66 27       	eor	r22, r22
 2b2:	60 f9       	bld	r22, 0
 2b4:	89 e0       	ldi	r24, 0x09	; 9
 2b6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	DIO_WritePinVal(LCD_D6,READBIT(Value,2));
 2ba:	c2 fb       	bst	r28, 2
 2bc:	66 27       	eor	r22, r22
 2be:	60 f9       	bld	r22, 0
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	DIO_WritePinVal(LCD_D7,READBIT(Value,3));
 2c6:	c3 fb       	bst	r28, 3
 2c8:	66 27       	eor	r22, r22
 2ca:	60 f9       	bld	r22, 0
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
}
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <LCD_send_command>:
	LCD_send_command(0b00000110);
	
	
}
void LCD_send_command(uint8 command)
{
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
	DIO_WritePinVal(LCD_RS,LOW);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	Write_Half_Port(command>>4);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	82 95       	swap	r24
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Write_Half_Port>
	DIO_WritePinVal(LCD_EN,HIGH);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	8f e9       	ldi	r24, 0x9F	; 159
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_send_command+0x22>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_send_command+0x28>
 2fe:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinVal(LCD_EN,LOW);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	Write_Half_Port(command);
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Write_Half_Port>
	DIO_WritePinVal(LCD_EN,HIGH);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 316:	8f e9       	ldi	r24, 0x9F	; 159
 318:	9f e0       	ldi	r25, 0x0F	; 15
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_send_command+0x44>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_send_command+0x4a>
 320:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinVal(LCD_EN,LOW);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_init>:
 32e:	2f e7       	ldi	r18, 0x7F	; 127
 330:	85 eb       	ldi	r24, 0xB5	; 181
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <LCD_init+0x6>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_init+0x10>
 33e:	00 00       	nop
	Dio_SetPinMode(LCD_D2,OutPut_Low);
	Dio_SetPinMode(LCD_D3,OutPut_Low);
	Dio_SetPinMode(LCD_EN,OutPut_Low);
	Dio_SetPinMode(LCD_RS,OutPut_Low);*/
	_delay_ms(35);
	DIO_WritePinVal(LCD_RS,LOW);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	Write_Half_Port(0b0010);
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Write_Half_Port>
	DIO_WritePinVal(LCD_EN,HIGH);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	9f e0       	ldi	r25, 0x0F	; 15
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_init+0x2c>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_init+0x32>
 360:	00 00       	nop
	_delay_ms(1);
	DIO_WritePinVal(LCD_EN,LOW);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
	LCD_send_command(0b00101000);
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	90 ef       	ldi	r25, 0xF0	; 240
 372:	9a 95       	dec	r25
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_init+0x44>
	_delay_us(45);
	LCD_send_command(0b00001111);
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_send_command>
 37c:	20 ef       	ldi	r18, 0xF0	; 240
 37e:	2a 95       	dec	r18
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_init+0x50>
	_delay_us(45);
	LCD_send_command(0b00000001);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	8f e3       	ldi	r24, 0x3F	; 63
 38a:	9f e1       	ldi	r25, 0x1F	; 31
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_init+0x5e>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_init+0x64>
 392:	00 00       	nop
	_delay_ms(2);
	LCD_send_command(0b00000110);
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_send_command>
 39a:	08 95       	ret

0000039c <Timer2_INT>:
	    }
}
}
void Timer2_INT(void)
{
	check_temp();
 39c:	0e 94 9e 02 	call	0x53c	; 0x53c <check_temp>
 3a0:	08 95       	ret

000003a2 <main>:
void Timer2_INT(void);
volatile u8 TEMP ;

int main(void)
{
	DIO_Init();
 3a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_Init>
	ADC_init();
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_init();
 3aa:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_init>
	KEYPAD_init();
 3ae:	0e 94 2f 01 	call	0x25e	; 0x25e <KEYPAD_init>
	Uart_init();
 3b2:	0e 94 c5 04 	call	0x98a	; 0x98a <Uart_init>
	SPI_SLave_Initialize();
 3b6:	0e 94 b0 02 	call	0x560	; 0x560 <SPI_SLave_Initialize>
	Timer2_Init();
 3ba:	0e 94 47 04 	call	0x88e	; 0x88e <Timer2_Init>
	TIMER0_voidInit();  // Initialize Timer0 for Fast PWM mode
 3be:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER0_voidInit>
	GI_Enable();
 3c2:	0e 94 2b 01 	call	0x256	; 0x256 <GI_Enable>
	TIMER0_voidStart();  // Start Timer0
 3c6:	0e 94 23 03 	call	0x646	; 0x646 <TIMER0_voidStart>
	Timer2_Start();
 3ca:	0e 94 53 04 	call	0x8a6	; 0x8a6 <Timer2_Start>

	while (1) {
	    Timer2_SetCallBack(Timer2_INT);
 3ce:	8e ec       	ldi	r24, 0xCE	; 206
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Timer2_SetCallBack>

	    uint8_t response = SPI_TranCeive(0);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
/*********************************************Admin Mode*************************************************/
	    if (response == 'A') {
 3dc:	81 34       	cpi	r24, 0x41	; 65
 3de:	09 f0       	breq	.+2      	; 0x3e2 <main+0x40>
 3e0:	59 c0       	rjmp	.+178    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	    	if(temp_val > 60)
 3e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <temp_val>
 3e6:	8d 33       	cpi	r24, 0x3D	; 61
 3e8:	28 f0       	brcs	.+10     	; 0x3f4 <main+0x52>
	    		{
	    			DIO_WritePinVal(Pin_C0,HIGH);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	80 e1       	ldi	r24, 0x10	; 16
 3ee:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0x5a>

	    		}
	    		else
	    		{
	    			DIO_WritePinVal(Pin_C0,LOW);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>

	    		}
	        response = SPI_TranCeive(0);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
/**************************************Door Control***************************************/
	        if (response == 'C') {
 402:	83 34       	cpi	r24, 0x43	; 67
 404:	99 f4       	brne	.+38     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	            response = SPI_TranCeive(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	            /*      Open Door      */
	            if (response == 'O') {
 40c:	8f 34       	cpi	r24, 0x4F	; 79
 40e:	31 f4       	brne	.+12     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	                response = SPI_TranCeive('O');
 410:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	                SRVM_voidOn(180);
 414:	84 eb       	ldi	r24, 0xB4	; 180
 416:	0e 94 c0 02 	call	0x580	; 0x580 <SRVM_voidOn>
 41a:	d9 cf       	rjmp	.-78     	; 0x3ce <main+0x2c>
	            }
	            /*      Close Door      */

	            else if (response == 'C') {
 41c:	83 34       	cpi	r24, 0x43	; 67
 41e:	b9 f6       	brne	.-82     	; 0x3ce <main+0x2c>
	                response = SPI_TranCeive('C');
 420:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	                SRVM_voidOn(90);
 424:	8a e5       	ldi	r24, 0x5A	; 90
 426:	0e 94 c0 02 	call	0x580	; 0x580 <SRVM_voidOn>
 42a:	d1 cf       	rjmp	.-94     	; 0x3ce <main+0x2c>
	            }
	        }

/**************************************Dimming the led***************************************/
	        else if (response == 'L') {
 42c:	8c 34       	cpi	r24, 0x4C	; 76
 42e:	e1 f4       	brne	.+56     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	       	            response = SPI_TranCeive(0);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	       	            /*      Level A      */
	       	            if (response == 'A') {
 436:	81 34       	cpi	r24, 0x41	; 65
 438:	31 f4       	brne	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	       	                response = SPI_TranCeive('A');
 43a:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	       	                   Control_Led(100);
 43e:	84 e6       	ldi	r24, 0x64	; 100
 440:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
 444:	c4 cf       	rjmp	.-120    	; 0x3ce <main+0x2c>
	       	            }
	       	            /*      Level B      */

	       	            else if (response == 'B') {
 446:	82 34       	cpi	r24, 0x42	; 66
 448:	31 f4       	brne	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	       	                response = SPI_TranCeive('B');
 44a:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	       	                 Control_Led(40);
 44e:	88 e2       	ldi	r24, 0x28	; 40
 450:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
 454:	bc cf       	rjmp	.-136    	; 0x3ce <main+0x2c>
	       	               }
	       	            /*      Level C      */
	       	            else if (response == 'C') {
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45a:	b9 cf       	rjmp	.-142    	; 0x3ce <main+0x2c>
	       	         	        response = SPI_TranCeive('C');
 45c:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	       	         	       Control_Led(1);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
 466:	b3 cf       	rjmp	.-154    	; 0x3ce <main+0x2c>
	       	         	   }
	       	        }
/************************************Air Condition Control************************************/
	        else if (response == 'A') {
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	09 f0       	breq	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	b0 cf       	rjmp	.-160    	; 0x3ce <main+0x2c>
	            response = SPI_TranCeive(temp_val);
 46e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <temp_val>
 472:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
	            if (response == '0') {
 476:	80 33       	cpi	r24, 0x30	; 48
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	a9 cf       	rjmp	.-174    	; 0x3ce <main+0x2c>
	                if (READ_BIT(PINA, 4) == 0)
 47c:	cc 99       	sbic	0x19, 4	; 25
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
	                   response = SPI_TranCeive('O');
 480:	8f e4       	ldi	r24, 0x4F	; 79
 482:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
 486:	a3 cf       	rjmp	.-186    	; 0x3ce <main+0x2c>
	                else if (READ_BIT(PINA, 4) == 1)
 488:	cc 9b       	sbis	0x19, 4	; 25
 48a:	a1 cf       	rjmp	.-190    	; 0x3ce <main+0x2c>
	                   response = SPI_TranCeive('C');
 48c:	83 e4       	ldi	r24, 0x43	; 67
 48e:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
 492:	9d cf       	rjmp	.-198    	; 0x3ce <main+0x2c>


	        }

/*********************************************User Mode*************************************************/
	    else if (response == 'U'){
 494:	85 35       	cpi	r24, 0x55	; 85
 496:	09 f0       	breq	.+2      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 498:	9a cf       	rjmp	.-204    	; 0x3ce <main+0x2c>
	    	if(temp_val >60 )
 49a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <temp_val>
 49e:	8d 33       	cpi	r24, 0x3D	; 61
 4a0:	28 f0       	brcs	.+10     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
	         {
	         	DIO_WritePinVal(Pin_C0,HIGH);
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	80 e1       	ldi	r24, 0x10	; 16
 4a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
	         }
	         else
	         {
	         	DIO_WritePinVal(Pin_C0,LOW);
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	80 e1       	ldi	r24, 0x10	; 16
 4b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>

	         }
	    u8  request = SPI_TranCeive(DEFAULT_ACK);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
		switch(request)
 4ba:	81 33       	cpi	r24, 0x31	; 49
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c0:	84 31       	cpi	r24, 0x14	; 20
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4c4:	84 cf       	rjmp	.-248    	; 0x3ce <main+0x2c>
 4c6:	82 33       	cpi	r24, 0x32	; 50
 4c8:	59 f0       	breq	.+22     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4ca:	83 33       	cpi	r24, 0x33	; 51
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	7f cf       	rjmp	.-258    	; 0x3ce <main+0x2c>
		{
		case TURN_ON_LED :
		DIO_WritePinVal(Pin_B0,HIGH);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
		Control_Led(100);
 4d8:	84 e6       	ldi	r24, 0x64	; 100
 4da:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
		break;
 4de:	77 cf       	rjmp	.-274    	; 0x3ce <main+0x2c>
		case LOWER_LED_ON :
		Control_Led(50);
 4e0:	82 e3       	ldi	r24, 0x32	; 50
 4e2:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
		break;
 4e6:	73 cf       	rjmp	.-282    	; 0x3ce <main+0x2c>
		case TURN_OFF_LED :
		//DIO_WritePinVal(Pin_B0,HIGH);
		Control_Led(1);
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 81 02 	call	0x502	; 0x502 <Control_Led>
		break;
 4ee:	6f cf       	rjmp	.-290    	; 0x3ce <main+0x2c>
		case SET_TEMPRETURE :
		SPI_TranCeive(temp_val);
 4f0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <temp_val>
 4f4:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_TranCeive>
		//TEMP = SPI_TranCeive(DEFAULT_ACK);


		DIO_WritePinVal(Pin_B0,HIGH);
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	88 e0       	ldi	r24, 0x08	; 8
 4fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
		break;
 500:	66 cf       	rjmp	.-308    	; 0x3ce <main+0x2c>

00000502 <Control_Led>:



void Control_Led (u8 Duty_Cycle)
{
	TIMER0_voidSetDutyCycleFastPWM(Duty_Cycle);
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER0_voidSetDutyCycleFastPWM>
 508:	08 95       	ret

0000050a <Read_Temperature>:
}


u8 Read_Temperature(void) {

	uint16 ADC_Value = ADC_ReadSingleChannel(ADC1);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_ReadSingleChannel>
	//ADC_ReadScanGroup(ScanGroup1, &ADC_Value); // Read from ADC channel 0

	// Calculate temperature value in degrees Celsius
	u16 mV_Value = (ADC_Value * 5000UL) / 1023UL;
 510:	9c 01       	movw	r18, r24
 512:	a8 e8       	ldi	r26, 0x88	; 136
 514:	b3 e1       	ldi	r27, 0x13	; 19
 516:	0e 94 71 07 	call	0xee2	; 0xee2 <__umulhisi3>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	33 e0       	ldi	r19, 0x03	; 3
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodsi4>
	u8 temperature_value = mV_Value / 10;
 526:	ad ec       	ldi	r26, 0xCD	; 205
 528:	bc ec       	ldi	r27, 0xCC	; 204
 52a:	0e 94 71 07 	call	0xee2	; 0xee2 <__umulhisi3>
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24


	return temperature_value  ;
}
 53a:	08 95       	ret

0000053c <check_temp>:

void check_temp(void)
{
		temp_val = Read_Temperature();
 53c:	0e 94 85 02 	call	0x50a	; 0x50a <Read_Temperature>
 540:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <temp_val>
		if(temp_val > 28)
 544:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <temp_val>
 548:	8d 31       	cpi	r24, 0x1D	; 29
 54a:	28 f0       	brcs	.+10     	; 0x556 <check_temp+0x1a>
		{
			DIO_WritePinVal(Pin_A4,HIGH);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	84 e0       	ldi	r24, 0x04	; 4
 550:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 554:	08 95       	ret
		}
		else
		{
			DIO_WritePinVal(Pin_A4,LOW);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_WritePinVal>
 55e:	08 95       	ret

00000560 <SPI_SLave_Initialize>:
u8 SPI_Receive(void)
{
	//Two Lines
	while (GET_BIT(SPSR, SPIF) != 1);
	return SPDR;
}
 560:	87 b3       	in	r24, 0x17	; 23
 562:	87 bb       	out	0x17, r24	; 23
 564:	87 b3       	in	r24, 0x17	; 23
 566:	87 bb       	out	0x17, r24	; 23
 568:	87 b3       	in	r24, 0x17	; 23
 56a:	87 bb       	out	0x17, r24	; 23
 56c:	87 b3       	in	r24, 0x17	; 23
 56e:	87 bb       	out	0x17, r24	; 23
 570:	83 e4       	ldi	r24, 0x43	; 67
 572:	8d b9       	out	0x0d, r24	; 13
 574:	08 95       	ret

00000576 <SPI_TranCeive>:
u8 SPI_TranCeive(u8 data)
{
	SPDR = data;
 576:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 578:	77 9b       	sbis	0x0e, 7	; 14
 57a:	fe cf       	rjmp	.-4      	; 0x578 <SPI_TranCeive+0x2>
	return SPDR;
 57c:	8f b1       	in	r24, 0x0f	; 15
}
 57e:	08 95       	ret

00000580 <SRVM_voidOn>:
#include "SRVM_Interface.h"
#include "SRVM_Private.h"


void SRVM_voidOn(u8 Copy_u8Angle)
{
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
	/* TMR1 init at pwm mode 14 */
	 CLEAR_BIT(TCCR1A,WGM10);
 588:	9f b5       	in	r25, 0x2f	; 47
 58a:	9e 7f       	andi	r25, 0xFE	; 254
 58c:	9f bd       	out	0x2f, r25	; 47
	  SET_BIT(TCCR1A,WGM11);
 58e:	9f b5       	in	r25, 0x2f	; 47
 590:	92 60       	ori	r25, 0x02	; 2
 592:	9f bd       	out	0x2f, r25	; 47
	  SET_BIT(TCCR1B,WGM12);
 594:	9e b5       	in	r25, 0x2e	; 46
 596:	98 60       	ori	r25, 0x08	; 8
 598:	9e bd       	out	0x2e, r25	; 46
	  SET_BIT(TCCR1B,WGM13);
 59a:	9e b5       	in	r25, 0x2e	; 46
 59c:	90 61       	ori	r25, 0x10	; 16
 59e:	9e bd       	out	0x2e, r25	; 46

	// Select Non Inverting Mode
     CLEAR_BIT(TCCR1A,COM1A0);
 5a0:	9f b5       	in	r25, 0x2f	; 47
 5a2:	9f 7b       	andi	r25, 0xBF	; 191
 5a4:	9f bd       	out	0x2f, r25	; 47
     SET_BIT(TCCR1A,COM1A1);
 5a6:	9f b5       	in	r25, 0x2f	; 47
 5a8:	90 68       	ori	r25, 0x80	; 128
 5aa:	9f bd       	out	0x2f, r25	; 47


	/* Set pwm fre. = 50 */
	ICR1_u16 = 4999;
 5ac:	27 e8       	ldi	r18, 0x87	; 135
 5ae:	33 e1       	ldi	r19, 0x13	; 19
 5b0:	37 bd       	out	0x27, r19	; 39
 5b2:	26 bd       	out	0x26, r18	; 38
	/* Set pwm duty cycle between 5 : 10
	 depend on desired angle[0 : 180]
	 Angle 0   -> position -90
	 Angle 90  -> position 0
	 Angle 280 -> position 90 */
    f32 dutyCycle = ((f32)Copy_u8Angle * 5) / 180 + 5;
 5b4:	68 2f       	mov	r22, r24
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 ea       	ldi	r20, 0xA0	; 160
 5c6:	50 e4       	ldi	r21, 0x40	; 64
 5c8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__mulsf3>
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	44 e3       	ldi	r20, 0x34	; 52
 5d2:	53 e4       	ldi	r21, 0x43	; 67
 5d4:	0e 94 b3 05 	call	0xb66	; 0xb66 <__divsf3>
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 ea       	ldi	r20, 0xA0	; 160
 5de:	50 e4       	ldi	r21, 0x40	; 64
 5e0:	0e 94 47 05 	call	0xa8e	; 0xa8e <__addsf3>
 5e4:	6b 01       	movw	r12, r22
 5e6:	7c 01       	movw	r14, r24
    OCR1A_u16 = ((f32)((dutyCycle * ICR1_u16) / 100));
 5e8:	66 b5       	in	r22, 0x26	; 38
 5ea:	77 b5       	in	r23, 0x27	; 39
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 54 06 	call	0xca8	; 0xca8 <__floatunsisf>
 5f4:	a7 01       	movw	r20, r14
 5f6:	96 01       	movw	r18, r12
 5f8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__mulsf3>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	48 ec       	ldi	r20, 0xC8	; 200
 602:	52 e4       	ldi	r21, 0x42	; 66
 604:	0e 94 b3 05 	call	0xb66	; 0xb66 <__divsf3>
 608:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixunssfsi>
 60c:	7b bd       	out	0x2b, r23	; 43
 60e:	6a bd       	out	0x2a, r22	; 42

	/* TMR1 start */
	// SET PRESCALER  64
    SET_BIT(TCCR1B,CS10);
 610:	8e b5       	in	r24, 0x2e	; 46
 612:	81 60       	ori	r24, 0x01	; 1
 614:	8e bd       	out	0x2e, r24	; 46
    SET_BIT(TCCR1B,CS11);
 616:	8e b5       	in	r24, 0x2e	; 46
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	8e bd       	out	0x2e, r24	; 46
    CLEAR_BIT(TCCR1B,CS12);
 61c:	8e b5       	in	r24, 0x2e	; 46
 61e:	8b 7f       	andi	r24, 0xFB	; 251
 620:	8e bd       	out	0x2e, r24	; 46

}
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	08 95       	ret

0000062c <TIMER0_voidInit>:
void TIMER0_voidetCallBackCTC(void(*PtrToFun)(void))
{

if(PtrToFun !=NULL)
{
	Private_pCallBackCTC=PtrToFun;
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	80 64       	ori	r24, 0x40	; 64
 630:	83 bf       	out	0x33, r24	; 51
 632:	83 b7       	in	r24, 0x33	; 51
 634:	88 60       	ori	r24, 0x08	; 8
 636:	83 bf       	out	0x33, r24	; 51
 638:	83 b7       	in	r24, 0x33	; 51
 63a:	8f 7e       	andi	r24, 0xEF	; 239
 63c:	83 bf       	out	0x33, r24	; 51
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	80 62       	ori	r24, 0x20	; 32
 642:	83 bf       	out	0x33, r24	; 51
 644:	08 95       	ret

00000646 <TIMER0_voidStart>:
 646:	83 b7       	in	r24, 0x33	; 51
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	83 bf       	out	0x33, r24	; 51
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	83 bf       	out	0x33, r24	; 51
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8b 7f       	andi	r24, 0xFB	; 251
 656:	83 bf       	out	0x33, r24	; 51
 658:	08 95       	ret

0000065a <TIMER0_voidSetDutyCycleFastPWM>:
 65a:	85 36       	cpi	r24, 0x65	; 101
 65c:	80 f4       	brcc	.+32     	; 0x67e <TIMER0_voidSetDutyCycleFastPWM+0x24>
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	32 2f       	mov	r19, r18
 664:	22 27       	eor	r18, r18
 666:	36 95       	lsr	r19
 668:	27 95       	ror	r18
 66a:	36 95       	lsr	r19
 66c:	27 95       	ror	r18
 66e:	ab e7       	ldi	r26, 0x7B	; 123
 670:	b4 e1       	ldi	r27, 0x14	; 20
 672:	0e 94 71 07 	call	0xee2	; 0xee2 <__umulhisi3>
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	81 50       	subi	r24, 0x01	; 1
 67c:	8c bf       	out	0x3c, r24	; 60
 67e:	08 95       	ret

00000680 <__vector_11>:
/*                                          ISRS                                             */
/*********************************************************************************************/
// OVER FLOW INTERRUPT
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
	static u16 Counter=0;
	Counter++;
 6a2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Counter.1809>
 6a6:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <Counter.1809+0x1>
 6aa:	01 96       	adiw	r24, 0x01	; 1
 6ac:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <Counter.1809+0x1>
 6b0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Counter.1809>
	if(TIMR0_OV_COUNTER == Counter)
 6b4:	8a 38       	cpi	r24, 0x8A	; 138
 6b6:	99 40       	sbci	r25, 0x09	; 9
 6b8:	69 f4       	brne	.+26     	; 0x6d4 <__vector_11+0x54>
	{
		/*Init timer with preload value*/
		TCNT0=TIMR0_PRELOAD_VALUE;
 6ba:	88 e9       	ldi	r24, 0x98	; 152
 6bc:	82 bf       	out	0x32, r24	; 50

		Counter= 0;
 6be:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <Counter.1809+0x1>
 6c2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <Counter.1809>
		/*Call Action*/
   if(Private_pCallBackOVF != NULL)
 6c6:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Private_pCallBackOVF>
 6ca:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <Private_pCallBackOVF+0x1>
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_11+0x54>
   {
	   Private_pCallBackOVF();
 6d2:	09 95       	icall
   }
	}
	
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_10>:
// CTC INTERRUPT

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	static u16 Counter=0;
	Counter++;
 718:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <Counter.1815>
 71c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <Counter.1815+0x1>
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <Counter.1815+0x1>
 726:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <Counter.1815>
	if(Privite_ctcCounter == Counter)
 72a:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <Privite_ctcCounter>
 72e:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <Privite_ctcCounter+0x1>
 732:	82 17       	cp	r24, r18
 734:	93 07       	cpc	r25, r19
 736:	59 f4       	brne	.+22     	; 0x74e <__vector_10+0x58>
	{

		Counter= 0;
 738:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <Counter.1815+0x1>
 73c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <Counter.1815>
		/*Call Action*/
   if(Private_pCallBackCTC != NULL)
 740:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <Private_pCallBackCTC>
 744:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <Private_pCallBackCTC+0x1>
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	09 f0       	breq	.+2      	; 0x74e <__vector_10+0x58>
   {
	   Private_pCallBackCTC();
 74c:	09 95       	icall
   }
	}

}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_9>:
	Timer1_Stop();
}

void M_TIMER1_ICU_void_INTDisable()
{
	CLRBIT(TIMSK,TICIE1);
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	2f 93       	push	r18
 77c:	3f 93       	push	r19
 77e:	4f 93       	push	r20
 780:	5f 93       	push	r21
 782:	6f 93       	push	r22
 784:	7f 93       	push	r23
 786:	8f 93       	push	r24
 788:	9f 93       	push	r25
 78a:	af 93       	push	r26
 78c:	bf 93       	push	r27
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
 792:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <private_ptr_CallBack_OVF>
 796:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <private_ptr_CallBack_OVF+0x1>
 79a:	30 97       	sbiw	r30, 0x00	; 0
 79c:	09 f0       	breq	.+2      	; 0x7a0 <__vector_9+0x30>
 79e:	09 95       	icall
 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	bf 91       	pop	r27
 7a6:	af 91       	pop	r26
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	7f 91       	pop	r23
 7ae:	6f 91       	pop	r22
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <__vector_7>:
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	2f 93       	push	r18
 7ce:	3f 93       	push	r19
 7d0:	4f 93       	push	r20
 7d2:	5f 93       	push	r21
 7d4:	6f 93       	push	r22
 7d6:	7f 93       	push	r23
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
 7dc:	af 93       	push	r26
 7de:	bf 93       	push	r27
 7e0:	ef 93       	push	r30
 7e2:	ff 93       	push	r31
 7e4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <ctc_counter.1828>
 7e8:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <ctc_counter.1828+0x1>
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <ctc_counter.1828+0x1>
 7f2:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <ctc_counter.1828>
 7f6:	20 91 9f 00 	lds	r18, 0x009F	; 0x80009f <private_CTC_A_counter>
 7fa:	30 91 a0 00 	lds	r19, 0x00A0	; 0x8000a0 <private_CTC_A_counter+0x1>
 7fe:	82 17       	cp	r24, r18
 800:	93 07       	cpc	r25, r19
 802:	59 f4       	brne	.+22     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 804:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <ctc_counter.1828+0x1>
 808:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <ctc_counter.1828>
 80c:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <private_ptr_CallBack_OVF>
 810:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <private_ptr_CallBack_OVF+0x1>
 814:	30 97       	sbiw	r30, 0x00	; 0
 816:	09 f0       	breq	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 818:	09 95       	icall
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	bf 91       	pop	r27
 820:	af 91       	pop	r26
 822:	9f 91       	pop	r25
 824:	8f 91       	pop	r24
 826:	7f 91       	pop	r23
 828:	6f 91       	pop	r22
 82a:	5f 91       	pop	r21
 82c:	4f 91       	pop	r20
 82e:	3f 91       	pop	r19
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_6>:
}

void __vector_6(void) __attribute__ ((signal));
void __vector_6(void)
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31
	if(private_ptr_ICU != NULL)
 85e:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <private_ptr_ICU>
 862:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <private_ptr_ICU+0x1>
 866:	30 97       	sbiw	r30, 0x00	; 0
 868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
	{
		private_ptr_ICU();
 86a:	09 95       	icall
	}
	
 86c:	ff 91       	pop	r31
 86e:	ef 91       	pop	r30
 870:	bf 91       	pop	r27
 872:	af 91       	pop	r26
 874:	9f 91       	pop	r25
 876:	8f 91       	pop	r24
 878:	7f 91       	pop	r23
 87a:	6f 91       	pop	r22
 87c:	5f 91       	pop	r21
 87e:	4f 91       	pop	r20
 880:	3f 91       	pop	r19
 882:	2f 91       	pop	r18
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <Timer2_Init>:
	{
		OCR2 = (((uint16)Duty * 256)/100 ) - 1;
	}
	#elif (TIMER2_PWM_MODE == TIMER2_INVERTING_PWM_MODE)
	if (Duty <=100){
	OCR2 = 100 - ((((uint16)Duty * 256)/100 ) - 1);}
 88e:	85 b5       	in	r24, 0x25	; 37
 890:	8f 7b       	andi	r24, 0xBF	; 191
 892:	85 bd       	out	0x25, r24	; 37
 894:	85 b5       	in	r24, 0x25	; 37
 896:	87 7f       	andi	r24, 0xF7	; 247
 898:	85 bd       	out	0x25, r24	; 37
 89a:	81 e7       	ldi	r24, 0x71	; 113
 89c:	84 bd       	out	0x24, r24	; 36
 89e:	89 b7       	in	r24, 0x39	; 57
 8a0:	80 64       	ori	r24, 0x40	; 64
 8a2:	89 bf       	out	0x39, r24	; 57
 8a4:	08 95       	ret

000008a6 <Timer2_Start>:
 8a6:	85 b5       	in	r24, 0x25	; 37
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	85 bd       	out	0x25, r24	; 37
 8ac:	85 b5       	in	r24, 0x25	; 37
 8ae:	82 60       	ori	r24, 0x02	; 2
 8b0:	85 bd       	out	0x25, r24	; 37
 8b2:	85 b5       	in	r24, 0x25	; 37
 8b4:	8b 7f       	andi	r24, 0xFB	; 251
 8b6:	85 bd       	out	0x25, r24	; 37
 8b8:	08 95       	ret

000008ba <Timer2_SetCallBack>:
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	21 f0       	breq	.+8      	; 0x8c6 <Timer2_SetCallBack+0xc>
 8be:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <private_ptr_CallBack_OVF2+0x1>
 8c2:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <private_ptr_CallBack_OVF2>
 8c6:	08 95       	ret

000008c8 <__vector_5>:
	#endif
}

void __vector_5(void) __attribute__ ((signal));
void __vector_5(void)
{
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
	static uint16 counter = 0;
	counter++;
 8ea:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <counter.1802>
 8ee:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <counter.1802+0x1>
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <counter.1802+0x1>
 8f8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <counter.1802>
	if (counter == TIMER2_OVF_COUNTER)
 8fc:	81 3d       	cpi	r24, 0xD1	; 209
 8fe:	93 40       	sbci	r25, 0x03	; 3
 900:	69 f4       	brne	.+26     	; 0x91c <__vector_5+0x54>
	{
		counter = 0;
 902:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <counter.1802+0x1>
 906:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <counter.1802>
		TCNT2 = TMR2_PRELOAD_VAL;
 90a:	81 e7       	ldi	r24, 0x71	; 113
 90c:	84 bd       	out	0x24, r24	; 36
		
		//Call Action
		if(private_ptr_CallBack_OVF2 != NULL)
 90e:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <private_ptr_CallBack_OVF2>
 912:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <private_ptr_CallBack_OVF2+0x1>
 916:	30 97       	sbiw	r30, 0x00	; 0
 918:	09 f0       	breq	.+2      	; 0x91c <__vector_5+0x54>
		{
			private_ptr_CallBack_OVF2();
 91a:	09 95       	icall
		}
		
	}
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_4>:

void __vector_4(void) __attribute__ ((signal));
void __vector_4(void)
{
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	8f 93       	push	r24
 94e:	9f 93       	push	r25
	static uint16 counter = 0;
	counter++;
 950:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <counter.1808>
 954:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <counter.1808+0x1>
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <counter.1808+0x1>
 95e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <counter.1808>
	if (counter == private_CTC_counter2)
 962:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <private_CTC_counter2>
 966:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <private_CTC_counter2+0x1>
 96a:	82 17       	cp	r24, r18
 96c:	93 07       	cpc	r25, r19
 96e:	21 f4       	brne	.+8      	; 0x978 <__vector_4+0x3a>
	{
		counter = 0;
 970:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <counter.1808+0x1>
 974:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter.1808>
		{
			private_ptr_CallBack_CTC2();
		}
		
	}
 978:	9f 91       	pop	r25
 97a:	8f 91       	pop	r24
 97c:	3f 91       	pop	r19
 97e:	2f 91       	pop	r18
 980:	0f 90       	pop	r0
 982:	0f be       	out	0x3f, r0	; 63
 984:	0f 90       	pop	r0
 986:	1f 90       	pop	r1
 988:	18 95       	reti

0000098a <Uart_init>:
	uart_rxc_fPtr = localFptr;
}

void UART_DEMPTY_intSetCallBack(void (*localFptr)(void))
{
	uart_dEmpty_fPtr = localFptr;
 98a:	87 e6       	ldi	r24, 0x67	; 103
 98c:	89 b9       	out	0x09, r24	; 9
 98e:	8a b1       	in	r24, 0x0a	; 10
 990:	88 61       	ori	r24, 0x18	; 24
 992:	8a b9       	out	0x0a, r24	; 10
 994:	80 b5       	in	r24, 0x20	; 32
 996:	86 60       	ori	r24, 0x06	; 6
 998:	80 bd       	out	0x20, r24	; 32
 99a:	80 b5       	in	r24, 0x20	; 32
 99c:	80 64       	ori	r24, 0x40	; 64
 99e:	80 bd       	out	0x20, r24	; 32
 9a0:	08 95       	ret

000009a2 <__vector_15>:
}

void __vector_15(void) __attribute__ ((signal));
void __vector_15(void)
{
 9a2:	1f 92       	push	r1
 9a4:	0f 92       	push	r0
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	0f 92       	push	r0
 9aa:	11 24       	eor	r1, r1
 9ac:	2f 93       	push	r18
 9ae:	3f 93       	push	r19
 9b0:	4f 93       	push	r20
 9b2:	5f 93       	push	r21
 9b4:	6f 93       	push	r22
 9b6:	7f 93       	push	r23
 9b8:	8f 93       	push	r24
 9ba:	9f 93       	push	r25
 9bc:	af 93       	push	r26
 9be:	bf 93       	push	r27
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
		uart_txc_fPtr();
 9c4:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <uart_txc_fPtr>
 9c8:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <uart_txc_fPtr+0x1>
 9cc:	09 95       	icall
	
}
 9ce:	ff 91       	pop	r31
 9d0:	ef 91       	pop	r30
 9d2:	bf 91       	pop	r27
 9d4:	af 91       	pop	r26
 9d6:	9f 91       	pop	r25
 9d8:	8f 91       	pop	r24
 9da:	7f 91       	pop	r23
 9dc:	6f 91       	pop	r22
 9de:	5f 91       	pop	r21
 9e0:	4f 91       	pop	r20
 9e2:	3f 91       	pop	r19
 9e4:	2f 91       	pop	r18
 9e6:	0f 90       	pop	r0
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	0f 90       	pop	r0
 9ec:	1f 90       	pop	r1
 9ee:	18 95       	reti

000009f0 <__vector_13>:

void __vector_13(void) __attribute__ ((signal));
void __vector_13(void)
{
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	ef 93       	push	r30
 a10:	ff 93       	push	r31
		uart_rxc_fPtr();
 a12:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <uart_rxc_fPtr>
 a16:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <uart_rxc_fPtr+0x1>
 a1a:	09 95       	icall
	
}
 a1c:	ff 91       	pop	r31
 a1e:	ef 91       	pop	r30
 a20:	bf 91       	pop	r27
 a22:	af 91       	pop	r26
 a24:	9f 91       	pop	r25
 a26:	8f 91       	pop	r24
 a28:	7f 91       	pop	r23
 a2a:	6f 91       	pop	r22
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	3f 91       	pop	r19
 a32:	2f 91       	pop	r18
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <__vector_14>:

void __vector_14(void) __attribute__ ((signal));
void __vector_14(void)
{
 a3e:	1f 92       	push	r1
 a40:	0f 92       	push	r0
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	0f 92       	push	r0
 a46:	11 24       	eor	r1, r1
 a48:	2f 93       	push	r18
 a4a:	3f 93       	push	r19
 a4c:	4f 93       	push	r20
 a4e:	5f 93       	push	r21
 a50:	6f 93       	push	r22
 a52:	7f 93       	push	r23
 a54:	8f 93       	push	r24
 a56:	9f 93       	push	r25
 a58:	af 93       	push	r26
 a5a:	bf 93       	push	r27
 a5c:	ef 93       	push	r30
 a5e:	ff 93       	push	r31
	
		uart_dEmpty_fPtr();
 a60:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <uart_dEmpty_fPtr>
 a64:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <uart_dEmpty_fPtr+0x1>
 a68:	09 95       	icall

 a6a:	ff 91       	pop	r31
 a6c:	ef 91       	pop	r30
 a6e:	bf 91       	pop	r27
 a70:	af 91       	pop	r26
 a72:	9f 91       	pop	r25
 a74:	8f 91       	pop	r24
 a76:	7f 91       	pop	r23
 a78:	6f 91       	pop	r22
 a7a:	5f 91       	pop	r21
 a7c:	4f 91       	pop	r20
 a7e:	3f 91       	pop	r19
 a80:	2f 91       	pop	r18
 a82:	0f 90       	pop	r0
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	0f 90       	pop	r0
 a88:	1f 90       	pop	r1
 a8a:	18 95       	reti

00000a8c <__subsf3>:
 a8c:	50 58       	subi	r21, 0x80	; 128

00000a8e <__addsf3>:
 a8e:	bb 27       	eor	r27, r27
 a90:	aa 27       	eor	r26, r26
 a92:	0e 94 5e 05 	call	0xabc	; 0xabc <__addsf3x>
 a96:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
 a9a:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
 a9e:	38 f0       	brcs	.+14     	; 0xaae <__addsf3+0x20>
 aa0:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
 aa4:	20 f0       	brcs	.+8      	; 0xaae <__addsf3+0x20>
 aa6:	39 f4       	brne	.+14     	; 0xab6 <__addsf3+0x28>
 aa8:	9f 3f       	cpi	r25, 0xFF	; 255
 aaa:	19 f4       	brne	.+6      	; 0xab2 <__addsf3+0x24>
 aac:	26 f4       	brtc	.+8      	; 0xab6 <__addsf3+0x28>
 aae:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>
 ab2:	0e f4       	brtc	.+2      	; 0xab6 <__addsf3+0x28>
 ab4:	e0 95       	com	r30
 ab6:	e7 fb       	bst	r30, 7
 ab8:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>

00000abc <__addsf3x>:
 abc:	e9 2f       	mov	r30, r25
 abe:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
 ac2:	58 f3       	brcs	.-42     	; 0xa9a <__addsf3+0xc>
 ac4:	ba 17       	cp	r27, r26
 ac6:	62 07       	cpc	r22, r18
 ac8:	73 07       	cpc	r23, r19
 aca:	84 07       	cpc	r24, r20
 acc:	95 07       	cpc	r25, r21
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__addsf3x+0x1c>
 ad0:	79 f4       	brne	.+30     	; 0xaf0 <__addsf3x+0x34>
 ad2:	a6 f5       	brtc	.+104    	; 0xb3c <__addsf3x+0x80>
 ad4:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_zero>
 ad8:	0e f4       	brtc	.+2      	; 0xadc <__addsf3x+0x20>
 ada:	e0 95       	com	r30
 adc:	0b 2e       	mov	r0, r27
 ade:	ba 2f       	mov	r27, r26
 ae0:	a0 2d       	mov	r26, r0
 ae2:	0b 01       	movw	r0, r22
 ae4:	b9 01       	movw	r22, r18
 ae6:	90 01       	movw	r18, r0
 ae8:	0c 01       	movw	r0, r24
 aea:	ca 01       	movw	r24, r20
 aec:	a0 01       	movw	r20, r0
 aee:	11 24       	eor	r1, r1
 af0:	ff 27       	eor	r31, r31
 af2:	59 1b       	sub	r21, r25
 af4:	99 f0       	breq	.+38     	; 0xb1c <__addsf3x+0x60>
 af6:	59 3f       	cpi	r21, 0xF9	; 249
 af8:	50 f4       	brcc	.+20     	; 0xb0e <__addsf3x+0x52>
 afa:	50 3e       	cpi	r21, 0xE0	; 224
 afc:	68 f1       	brcs	.+90     	; 0xb58 <__addsf3x+0x9c>
 afe:	1a 16       	cp	r1, r26
 b00:	f0 40       	sbci	r31, 0x00	; 0
 b02:	a2 2f       	mov	r26, r18
 b04:	23 2f       	mov	r18, r19
 b06:	34 2f       	mov	r19, r20
 b08:	44 27       	eor	r20, r20
 b0a:	58 5f       	subi	r21, 0xF8	; 248
 b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <__addsf3x+0x38>
 b0e:	46 95       	lsr	r20
 b10:	37 95       	ror	r19
 b12:	27 95       	ror	r18
 b14:	a7 95       	ror	r26
 b16:	f0 40       	sbci	r31, 0x00	; 0
 b18:	53 95       	inc	r21
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__addsf3x+0x52>
 b1c:	7e f4       	brtc	.+30     	; 0xb3c <__addsf3x+0x80>
 b1e:	1f 16       	cp	r1, r31
 b20:	ba 0b       	sbc	r27, r26
 b22:	62 0b       	sbc	r22, r18
 b24:	73 0b       	sbc	r23, r19
 b26:	84 0b       	sbc	r24, r20
 b28:	ba f0       	brmi	.+46     	; 0xb58 <__addsf3x+0x9c>
 b2a:	91 50       	subi	r25, 0x01	; 1
 b2c:	a1 f0       	breq	.+40     	; 0xb56 <__addsf3x+0x9a>
 b2e:	ff 0f       	add	r31, r31
 b30:	bb 1f       	adc	r27, r27
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	c2 f7       	brpl	.-16     	; 0xb2a <__addsf3x+0x6e>
 b3a:	0e c0       	rjmp	.+28     	; 0xb58 <__addsf3x+0x9c>
 b3c:	ba 0f       	add	r27, r26
 b3e:	62 1f       	adc	r22, r18
 b40:	73 1f       	adc	r23, r19
 b42:	84 1f       	adc	r24, r20
 b44:	48 f4       	brcc	.+18     	; 0xb58 <__addsf3x+0x9c>
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f7 95       	ror	r31
 b50:	9e 3f       	cpi	r25, 0xFE	; 254
 b52:	08 f0       	brcs	.+2      	; 0xb56 <__addsf3x+0x9a>
 b54:	b0 cf       	rjmp	.-160    	; 0xab6 <__addsf3+0x28>
 b56:	93 95       	inc	r25
 b58:	88 0f       	add	r24, r24
 b5a:	08 f0       	brcs	.+2      	; 0xb5e <__addsf3x+0xa2>
 b5c:	99 27       	eor	r25, r25
 b5e:	ee 0f       	add	r30, r30
 b60:	97 95       	ror	r25
 b62:	87 95       	ror	r24
 b64:	08 95       	ret

00000b66 <__divsf3>:
 b66:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__divsf3x>
 b6a:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
 b6e:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
 b72:	58 f0       	brcs	.+22     	; 0xb8a <__divsf3+0x24>
 b74:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
 b78:	40 f0       	brcs	.+16     	; 0xb8a <__divsf3+0x24>
 b7a:	29 f4       	brne	.+10     	; 0xb86 <__divsf3+0x20>
 b7c:	5f 3f       	cpi	r21, 0xFF	; 255
 b7e:	29 f0       	breq	.+10     	; 0xb8a <__divsf3+0x24>
 b80:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
 b84:	51 11       	cpse	r21, r1
 b86:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
 b8a:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>

00000b8e <__divsf3x>:
 b8e:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
 b92:	68 f3       	brcs	.-38     	; 0xb6e <__divsf3+0x8>

00000b94 <__divsf3_pse>:
 b94:	99 23       	and	r25, r25
 b96:	b1 f3       	breq	.-20     	; 0xb84 <__divsf3+0x1e>
 b98:	55 23       	and	r21, r21
 b9a:	91 f3       	breq	.-28     	; 0xb80 <__divsf3+0x1a>
 b9c:	95 1b       	sub	r25, r21
 b9e:	55 0b       	sbc	r21, r21
 ba0:	bb 27       	eor	r27, r27
 ba2:	aa 27       	eor	r26, r26
 ba4:	62 17       	cp	r22, r18
 ba6:	73 07       	cpc	r23, r19
 ba8:	84 07       	cpc	r24, r20
 baa:	38 f0       	brcs	.+14     	; 0xbba <__divsf3_pse+0x26>
 bac:	9f 5f       	subi	r25, 0xFF	; 255
 bae:	5f 4f       	sbci	r21, 0xFF	; 255
 bb0:	22 0f       	add	r18, r18
 bb2:	33 1f       	adc	r19, r19
 bb4:	44 1f       	adc	r20, r20
 bb6:	aa 1f       	adc	r26, r26
 bb8:	a9 f3       	breq	.-22     	; 0xba4 <__divsf3_pse+0x10>
 bba:	35 d0       	rcall	.+106    	; 0xc26 <__divsf3_pse+0x92>
 bbc:	0e 2e       	mov	r0, r30
 bbe:	3a f0       	brmi	.+14     	; 0xbce <__divsf3_pse+0x3a>
 bc0:	e0 e8       	ldi	r30, 0x80	; 128
 bc2:	32 d0       	rcall	.+100    	; 0xc28 <__divsf3_pse+0x94>
 bc4:	91 50       	subi	r25, 0x01	; 1
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	e6 95       	lsr	r30
 bca:	00 1c       	adc	r0, r0
 bcc:	ca f7       	brpl	.-14     	; 0xbc0 <__divsf3_pse+0x2c>
 bce:	2b d0       	rcall	.+86     	; 0xc26 <__divsf3_pse+0x92>
 bd0:	fe 2f       	mov	r31, r30
 bd2:	29 d0       	rcall	.+82     	; 0xc26 <__divsf3_pse+0x92>
 bd4:	66 0f       	add	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	bb 1f       	adc	r27, r27
 bdc:	26 17       	cp	r18, r22
 bde:	37 07       	cpc	r19, r23
 be0:	48 07       	cpc	r20, r24
 be2:	ab 07       	cpc	r26, r27
 be4:	b0 e8       	ldi	r27, 0x80	; 128
 be6:	09 f0       	breq	.+2      	; 0xbea <__divsf3_pse+0x56>
 be8:	bb 0b       	sbc	r27, r27
 bea:	80 2d       	mov	r24, r0
 bec:	bf 01       	movw	r22, r30
 bee:	ff 27       	eor	r31, r31
 bf0:	93 58       	subi	r25, 0x83	; 131
 bf2:	5f 4f       	sbci	r21, 0xFF	; 255
 bf4:	3a f0       	brmi	.+14     	; 0xc04 <__divsf3_pse+0x70>
 bf6:	9e 3f       	cpi	r25, 0xFE	; 254
 bf8:	51 05       	cpc	r21, r1
 bfa:	78 f0       	brcs	.+30     	; 0xc1a <__divsf3_pse+0x86>
 bfc:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
 c00:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
 c04:	5f 3f       	cpi	r21, 0xFF	; 255
 c06:	e4 f3       	brlt	.-8      	; 0xc00 <__divsf3_pse+0x6c>
 c08:	98 3e       	cpi	r25, 0xE8	; 232
 c0a:	d4 f3       	brlt	.-12     	; 0xc00 <__divsf3_pse+0x6c>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b7 95       	ror	r27
 c14:	f7 95       	ror	r31
 c16:	9f 5f       	subi	r25, 0xFF	; 255
 c18:	c9 f7       	brne	.-14     	; 0xc0c <__divsf3_pse+0x78>
 c1a:	88 0f       	add	r24, r24
 c1c:	91 1d       	adc	r25, r1
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret
 c26:	e1 e0       	ldi	r30, 0x01	; 1
 c28:	66 0f       	add	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	bb 1f       	adc	r27, r27
 c30:	62 17       	cp	r22, r18
 c32:	73 07       	cpc	r23, r19
 c34:	84 07       	cpc	r24, r20
 c36:	ba 07       	cpc	r27, r26
 c38:	20 f0       	brcs	.+8      	; 0xc42 <__divsf3_pse+0xae>
 c3a:	62 1b       	sub	r22, r18
 c3c:	73 0b       	sbc	r23, r19
 c3e:	84 0b       	sbc	r24, r20
 c40:	ba 0b       	sbc	r27, r26
 c42:	ee 1f       	adc	r30, r30
 c44:	88 f7       	brcc	.-30     	; 0xc28 <__divsf3_pse+0x94>
 c46:	e0 95       	com	r30
 c48:	08 95       	ret

00000c4a <__fixunssfsi>:
 c4a:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fp_splitA>
 c4e:	88 f0       	brcs	.+34     	; 0xc72 <__fixunssfsi+0x28>
 c50:	9f 57       	subi	r25, 0x7F	; 127
 c52:	98 f0       	brcs	.+38     	; 0xc7a <__fixunssfsi+0x30>
 c54:	b9 2f       	mov	r27, r25
 c56:	99 27       	eor	r25, r25
 c58:	b7 51       	subi	r27, 0x17	; 23
 c5a:	b0 f0       	brcs	.+44     	; 0xc88 <__fixunssfsi+0x3e>
 c5c:	e1 f0       	breq	.+56     	; 0xc96 <__fixunssfsi+0x4c>
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	1a f0       	brmi	.+6      	; 0xc6e <__fixunssfsi+0x24>
 c68:	ba 95       	dec	r27
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <__fixunssfsi+0x14>
 c6c:	14 c0       	rjmp	.+40     	; 0xc96 <__fixunssfsi+0x4c>
 c6e:	b1 30       	cpi	r27, 0x01	; 1
 c70:	91 f0       	breq	.+36     	; 0xc96 <__fixunssfsi+0x4c>
 c72:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_zero>
 c76:	b1 e0       	ldi	r27, 0x01	; 1
 c78:	08 95       	ret
 c7a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__fp_zero>
 c7e:	67 2f       	mov	r22, r23
 c80:	78 2f       	mov	r23, r24
 c82:	88 27       	eor	r24, r24
 c84:	b8 5f       	subi	r27, 0xF8	; 248
 c86:	39 f0       	breq	.+14     	; 0xc96 <__fixunssfsi+0x4c>
 c88:	b9 3f       	cpi	r27, 0xF9	; 249
 c8a:	cc f3       	brlt	.-14     	; 0xc7e <__fixunssfsi+0x34>
 c8c:	86 95       	lsr	r24
 c8e:	77 95       	ror	r23
 c90:	67 95       	ror	r22
 c92:	b3 95       	inc	r27
 c94:	d9 f7       	brne	.-10     	; 0xc8c <__fixunssfsi+0x42>
 c96:	3e f4       	brtc	.+14     	; 0xca6 <__fixunssfsi+0x5c>
 c98:	90 95       	com	r25
 c9a:	80 95       	com	r24
 c9c:	70 95       	com	r23
 c9e:	61 95       	neg	r22
 ca0:	7f 4f       	sbci	r23, 0xFF	; 255
 ca2:	8f 4f       	sbci	r24, 0xFF	; 255
 ca4:	9f 4f       	sbci	r25, 0xFF	; 255
 ca6:	08 95       	ret

00000ca8 <__floatunsisf>:
 ca8:	e8 94       	clt
 caa:	09 c0       	rjmp	.+18     	; 0xcbe <__floatsisf+0x12>

00000cac <__floatsisf>:
 cac:	97 fb       	bst	r25, 7
 cae:	3e f4       	brtc	.+14     	; 0xcbe <__floatsisf+0x12>
 cb0:	90 95       	com	r25
 cb2:	80 95       	com	r24
 cb4:	70 95       	com	r23
 cb6:	61 95       	neg	r22
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	99 23       	and	r25, r25
 cc0:	a9 f0       	breq	.+42     	; 0xcec <__floatsisf+0x40>
 cc2:	f9 2f       	mov	r31, r25
 cc4:	96 e9       	ldi	r25, 0x96	; 150
 cc6:	bb 27       	eor	r27, r27
 cc8:	93 95       	inc	r25
 cca:	f6 95       	lsr	r31
 ccc:	87 95       	ror	r24
 cce:	77 95       	ror	r23
 cd0:	67 95       	ror	r22
 cd2:	b7 95       	ror	r27
 cd4:	f1 11       	cpse	r31, r1
 cd6:	f8 cf       	rjmp	.-16     	; 0xcc8 <__floatsisf+0x1c>
 cd8:	fa f4       	brpl	.+62     	; 0xd18 <__floatsisf+0x6c>
 cda:	bb 0f       	add	r27, r27
 cdc:	11 f4       	brne	.+4      	; 0xce2 <__floatsisf+0x36>
 cde:	60 ff       	sbrs	r22, 0
 ce0:	1b c0       	rjmp	.+54     	; 0xd18 <__floatsisf+0x6c>
 ce2:	6f 5f       	subi	r22, 0xFF	; 255
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	16 c0       	rjmp	.+44     	; 0xd18 <__floatsisf+0x6c>
 cec:	88 23       	and	r24, r24
 cee:	11 f0       	breq	.+4      	; 0xcf4 <__floatsisf+0x48>
 cf0:	96 e9       	ldi	r25, 0x96	; 150
 cf2:	11 c0       	rjmp	.+34     	; 0xd16 <__floatsisf+0x6a>
 cf4:	77 23       	and	r23, r23
 cf6:	21 f0       	breq	.+8      	; 0xd00 <__floatsisf+0x54>
 cf8:	9e e8       	ldi	r25, 0x8E	; 142
 cfa:	87 2f       	mov	r24, r23
 cfc:	76 2f       	mov	r23, r22
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__floatsisf+0x5e>
 d00:	66 23       	and	r22, r22
 d02:	71 f0       	breq	.+28     	; 0xd20 <__floatsisf+0x74>
 d04:	96 e8       	ldi	r25, 0x86	; 134
 d06:	86 2f       	mov	r24, r22
 d08:	70 e0       	ldi	r23, 0x00	; 0
 d0a:	60 e0       	ldi	r22, 0x00	; 0
 d0c:	2a f0       	brmi	.+10     	; 0xd18 <__floatsisf+0x6c>
 d0e:	9a 95       	dec	r25
 d10:	66 0f       	add	r22, r22
 d12:	77 1f       	adc	r23, r23
 d14:	88 1f       	adc	r24, r24
 d16:	da f7       	brpl	.-10     	; 0xd0e <__floatsisf+0x62>
 d18:	88 0f       	add	r24, r24
 d1a:	96 95       	lsr	r25
 d1c:	87 95       	ror	r24
 d1e:	97 f9       	bld	r25, 7
 d20:	08 95       	ret

00000d22 <__fp_inf>:
 d22:	97 f9       	bld	r25, 7
 d24:	9f 67       	ori	r25, 0x7F	; 127
 d26:	80 e8       	ldi	r24, 0x80	; 128
 d28:	70 e0       	ldi	r23, 0x00	; 0
 d2a:	60 e0       	ldi	r22, 0x00	; 0
 d2c:	08 95       	ret

00000d2e <__fp_nan>:
 d2e:	9f ef       	ldi	r25, 0xFF	; 255
 d30:	80 ec       	ldi	r24, 0xC0	; 192
 d32:	08 95       	ret

00000d34 <__fp_pscA>:
 d34:	00 24       	eor	r0, r0
 d36:	0a 94       	dec	r0
 d38:	16 16       	cp	r1, r22
 d3a:	17 06       	cpc	r1, r23
 d3c:	18 06       	cpc	r1, r24
 d3e:	09 06       	cpc	r0, r25
 d40:	08 95       	ret

00000d42 <__fp_pscB>:
 d42:	00 24       	eor	r0, r0
 d44:	0a 94       	dec	r0
 d46:	12 16       	cp	r1, r18
 d48:	13 06       	cpc	r1, r19
 d4a:	14 06       	cpc	r1, r20
 d4c:	05 06       	cpc	r0, r21
 d4e:	08 95       	ret

00000d50 <__fp_round>:
 d50:	09 2e       	mov	r0, r25
 d52:	03 94       	inc	r0
 d54:	00 0c       	add	r0, r0
 d56:	11 f4       	brne	.+4      	; 0xd5c <__fp_round+0xc>
 d58:	88 23       	and	r24, r24
 d5a:	52 f0       	brmi	.+20     	; 0xd70 <__fp_round+0x20>
 d5c:	bb 0f       	add	r27, r27
 d5e:	40 f4       	brcc	.+16     	; 0xd70 <__fp_round+0x20>
 d60:	bf 2b       	or	r27, r31
 d62:	11 f4       	brne	.+4      	; 0xd68 <__fp_round+0x18>
 d64:	60 ff       	sbrs	r22, 0
 d66:	04 c0       	rjmp	.+8      	; 0xd70 <__fp_round+0x20>
 d68:	6f 5f       	subi	r22, 0xFF	; 255
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	8f 4f       	sbci	r24, 0xFF	; 255
 d6e:	9f 4f       	sbci	r25, 0xFF	; 255
 d70:	08 95       	ret

00000d72 <__fp_split3>:
 d72:	57 fd       	sbrc	r21, 7
 d74:	90 58       	subi	r25, 0x80	; 128
 d76:	44 0f       	add	r20, r20
 d78:	55 1f       	adc	r21, r21
 d7a:	59 f0       	breq	.+22     	; 0xd92 <__fp_splitA+0x10>
 d7c:	5f 3f       	cpi	r21, 0xFF	; 255
 d7e:	71 f0       	breq	.+28     	; 0xd9c <__fp_splitA+0x1a>
 d80:	47 95       	ror	r20

00000d82 <__fp_splitA>:
 d82:	88 0f       	add	r24, r24
 d84:	97 fb       	bst	r25, 7
 d86:	99 1f       	adc	r25, r25
 d88:	61 f0       	breq	.+24     	; 0xda2 <__fp_splitA+0x20>
 d8a:	9f 3f       	cpi	r25, 0xFF	; 255
 d8c:	79 f0       	breq	.+30     	; 0xdac <__fp_splitA+0x2a>
 d8e:	87 95       	ror	r24
 d90:	08 95       	ret
 d92:	12 16       	cp	r1, r18
 d94:	13 06       	cpc	r1, r19
 d96:	14 06       	cpc	r1, r20
 d98:	55 1f       	adc	r21, r21
 d9a:	f2 cf       	rjmp	.-28     	; 0xd80 <__fp_split3+0xe>
 d9c:	46 95       	lsr	r20
 d9e:	f1 df       	rcall	.-30     	; 0xd82 <__fp_splitA>
 da0:	08 c0       	rjmp	.+16     	; 0xdb2 <__fp_splitA+0x30>
 da2:	16 16       	cp	r1, r22
 da4:	17 06       	cpc	r1, r23
 da6:	18 06       	cpc	r1, r24
 da8:	99 1f       	adc	r25, r25
 daa:	f1 cf       	rjmp	.-30     	; 0xd8e <__fp_splitA+0xc>
 dac:	86 95       	lsr	r24
 dae:	71 05       	cpc	r23, r1
 db0:	61 05       	cpc	r22, r1
 db2:	08 94       	sec
 db4:	08 95       	ret

00000db6 <__fp_zero>:
 db6:	e8 94       	clt

00000db8 <__fp_szero>:
 db8:	bb 27       	eor	r27, r27
 dba:	66 27       	eor	r22, r22
 dbc:	77 27       	eor	r23, r23
 dbe:	cb 01       	movw	r24, r22
 dc0:	97 f9       	bld	r25, 7
 dc2:	08 95       	ret

00000dc4 <__mulsf3>:
 dc4:	0e 94 f5 06 	call	0xdea	; 0xdea <__mulsf3x>
 dc8:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_round>
 dcc:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscA>
 dd0:	38 f0       	brcs	.+14     	; 0xde0 <__mulsf3+0x1c>
 dd2:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_pscB>
 dd6:	20 f0       	brcs	.+8      	; 0xde0 <__mulsf3+0x1c>
 dd8:	95 23       	and	r25, r21
 dda:	11 f0       	breq	.+4      	; 0xde0 <__mulsf3+0x1c>
 ddc:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
 de0:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_nan>
 de4:	11 24       	eor	r1, r1
 de6:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>

00000dea <__mulsf3x>:
 dea:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_split3>
 dee:	70 f3       	brcs	.-36     	; 0xdcc <__mulsf3+0x8>

00000df0 <__mulsf3_pse>:
 df0:	95 9f       	mul	r25, r21
 df2:	c1 f3       	breq	.-16     	; 0xde4 <__mulsf3+0x20>
 df4:	95 0f       	add	r25, r21
 df6:	50 e0       	ldi	r21, 0x00	; 0
 df8:	55 1f       	adc	r21, r21
 dfa:	62 9f       	mul	r22, r18
 dfc:	f0 01       	movw	r30, r0
 dfe:	72 9f       	mul	r23, r18
 e00:	bb 27       	eor	r27, r27
 e02:	f0 0d       	add	r31, r0
 e04:	b1 1d       	adc	r27, r1
 e06:	63 9f       	mul	r22, r19
 e08:	aa 27       	eor	r26, r26
 e0a:	f0 0d       	add	r31, r0
 e0c:	b1 1d       	adc	r27, r1
 e0e:	aa 1f       	adc	r26, r26
 e10:	64 9f       	mul	r22, r20
 e12:	66 27       	eor	r22, r22
 e14:	b0 0d       	add	r27, r0
 e16:	a1 1d       	adc	r26, r1
 e18:	66 1f       	adc	r22, r22
 e1a:	82 9f       	mul	r24, r18
 e1c:	22 27       	eor	r18, r18
 e1e:	b0 0d       	add	r27, r0
 e20:	a1 1d       	adc	r26, r1
 e22:	62 1f       	adc	r22, r18
 e24:	73 9f       	mul	r23, r19
 e26:	b0 0d       	add	r27, r0
 e28:	a1 1d       	adc	r26, r1
 e2a:	62 1f       	adc	r22, r18
 e2c:	83 9f       	mul	r24, r19
 e2e:	a0 0d       	add	r26, r0
 e30:	61 1d       	adc	r22, r1
 e32:	22 1f       	adc	r18, r18
 e34:	74 9f       	mul	r23, r20
 e36:	33 27       	eor	r19, r19
 e38:	a0 0d       	add	r26, r0
 e3a:	61 1d       	adc	r22, r1
 e3c:	23 1f       	adc	r18, r19
 e3e:	84 9f       	mul	r24, r20
 e40:	60 0d       	add	r22, r0
 e42:	21 1d       	adc	r18, r1
 e44:	82 2f       	mov	r24, r18
 e46:	76 2f       	mov	r23, r22
 e48:	6a 2f       	mov	r22, r26
 e4a:	11 24       	eor	r1, r1
 e4c:	9f 57       	subi	r25, 0x7F	; 127
 e4e:	50 40       	sbci	r21, 0x00	; 0
 e50:	9a f0       	brmi	.+38     	; 0xe78 <__mulsf3_pse+0x88>
 e52:	f1 f0       	breq	.+60     	; 0xe90 <__mulsf3_pse+0xa0>
 e54:	88 23       	and	r24, r24
 e56:	4a f0       	brmi	.+18     	; 0xe6a <__mulsf3_pse+0x7a>
 e58:	ee 0f       	add	r30, r30
 e5a:	ff 1f       	adc	r31, r31
 e5c:	bb 1f       	adc	r27, r27
 e5e:	66 1f       	adc	r22, r22
 e60:	77 1f       	adc	r23, r23
 e62:	88 1f       	adc	r24, r24
 e64:	91 50       	subi	r25, 0x01	; 1
 e66:	50 40       	sbci	r21, 0x00	; 0
 e68:	a9 f7       	brne	.-22     	; 0xe54 <__mulsf3_pse+0x64>
 e6a:	9e 3f       	cpi	r25, 0xFE	; 254
 e6c:	51 05       	cpc	r21, r1
 e6e:	80 f0       	brcs	.+32     	; 0xe90 <__mulsf3_pse+0xa0>
 e70:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_inf>
 e74:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_szero>
 e78:	5f 3f       	cpi	r21, 0xFF	; 255
 e7a:	e4 f3       	brlt	.-8      	; 0xe74 <__mulsf3_pse+0x84>
 e7c:	98 3e       	cpi	r25, 0xE8	; 232
 e7e:	d4 f3       	brlt	.-12     	; 0xe74 <__mulsf3_pse+0x84>
 e80:	86 95       	lsr	r24
 e82:	77 95       	ror	r23
 e84:	67 95       	ror	r22
 e86:	b7 95       	ror	r27
 e88:	f7 95       	ror	r31
 e8a:	e7 95       	ror	r30
 e8c:	9f 5f       	subi	r25, 0xFF	; 255
 e8e:	c1 f7       	brne	.-16     	; 0xe80 <__mulsf3_pse+0x90>
 e90:	fe 2b       	or	r31, r30
 e92:	88 0f       	add	r24, r24
 e94:	91 1d       	adc	r25, r1
 e96:	96 95       	lsr	r25
 e98:	87 95       	ror	r24
 e9a:	97 f9       	bld	r25, 7
 e9c:	08 95       	ret

00000e9e <__udivmodsi4>:
 e9e:	a1 e2       	ldi	r26, 0x21	; 33
 ea0:	1a 2e       	mov	r1, r26
 ea2:	aa 1b       	sub	r26, r26
 ea4:	bb 1b       	sub	r27, r27
 ea6:	fd 01       	movw	r30, r26
 ea8:	0d c0       	rjmp	.+26     	; 0xec4 <__udivmodsi4_ep>

00000eaa <__udivmodsi4_loop>:
 eaa:	aa 1f       	adc	r26, r26
 eac:	bb 1f       	adc	r27, r27
 eae:	ee 1f       	adc	r30, r30
 eb0:	ff 1f       	adc	r31, r31
 eb2:	a2 17       	cp	r26, r18
 eb4:	b3 07       	cpc	r27, r19
 eb6:	e4 07       	cpc	r30, r20
 eb8:	f5 07       	cpc	r31, r21
 eba:	20 f0       	brcs	.+8      	; 0xec4 <__udivmodsi4_ep>
 ebc:	a2 1b       	sub	r26, r18
 ebe:	b3 0b       	sbc	r27, r19
 ec0:	e4 0b       	sbc	r30, r20
 ec2:	f5 0b       	sbc	r31, r21

00000ec4 <__udivmodsi4_ep>:
 ec4:	66 1f       	adc	r22, r22
 ec6:	77 1f       	adc	r23, r23
 ec8:	88 1f       	adc	r24, r24
 eca:	99 1f       	adc	r25, r25
 ecc:	1a 94       	dec	r1
 ece:	69 f7       	brne	.-38     	; 0xeaa <__udivmodsi4_loop>
 ed0:	60 95       	com	r22
 ed2:	70 95       	com	r23
 ed4:	80 95       	com	r24
 ed6:	90 95       	com	r25
 ed8:	9b 01       	movw	r18, r22
 eda:	ac 01       	movw	r20, r24
 edc:	bd 01       	movw	r22, r26
 ede:	cf 01       	movw	r24, r30
 ee0:	08 95       	ret

00000ee2 <__umulhisi3>:
 ee2:	a2 9f       	mul	r26, r18
 ee4:	b0 01       	movw	r22, r0
 ee6:	b3 9f       	mul	r27, r19
 ee8:	c0 01       	movw	r24, r0
 eea:	a3 9f       	mul	r26, r19
 eec:	70 0d       	add	r23, r0
 eee:	81 1d       	adc	r24, r1
 ef0:	11 24       	eor	r1, r1
 ef2:	91 1d       	adc	r25, r1
 ef4:	b2 9f       	mul	r27, r18
 ef6:	70 0d       	add	r23, r0
 ef8:	81 1d       	adc	r24, r1
 efa:	11 24       	eor	r1, r1
 efc:	91 1d       	adc	r25, r1
 efe:	08 95       	ret

00000f00 <_exit>:
 f00:	f8 94       	cli

00000f02 <__stop_program>:
 f02:	ff cf       	rjmp	.-2      	; 0xf02 <__stop_program>
